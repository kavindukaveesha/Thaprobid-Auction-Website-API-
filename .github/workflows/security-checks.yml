name: 🔒 Security Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security checks daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  dependency-security:
    name: 🔍 Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Restore dependencies
      run: dotnet restore api/api.csproj
      
    - name: Security audit
      run: |
        # Install security audit tool
        dotnet tool install --global security-scan
        
        # Run security audit on packages
        dotnet list api/api.csproj package --vulnerable --include-transitive || true
        
    - name: Check for vulnerable packages
      run: |
        cd api
        # This will fail the build if vulnerable packages are found
        dotnet list package --vulnerable --include-transitive > vuln-report.txt
        if grep -q "has the following vulnerable packages" vuln-report.txt; then
          echo "❌ Vulnerable packages detected!"
          cat vuln-report.txt
          exit 1
        else
          echo "✅ No vulnerable packages found"
        fi

  code-security-analysis:
    name: 🛡️ Code Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Build project
      run: |
        cd api
        dotnet build --configuration Release --no-restore
        
    - name: Run security code analysis
      run: |
        cd api
        # Install security analyzer
        dotnet add package Microsoft.CodeAnalysis.NetAnalyzers
        dotnet add package SecurityCodeScan.VS2019
        
        # Build with security analysis
        dotnet build --configuration Release --verbosity normal

  secrets-scan:
    name: 🔐 Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install gitleaks
      run: |
        wget https://github.com/zricethezav/gitleaks/releases/latest/download/gitleaks_8.18.0_linux_x64.tar.gz
        tar -xzf gitleaks_8.18.0_linux_x64.tar.gz
        sudo mv gitleaks /usr/local/bin/
        
    - name: Run gitleaks
      run: |
        gitleaks detect --source . --verbose --report-format json --report-path gitleaks-report.json || true
        
    - name: Check for secrets
      run: |
        if [ -f gitleaks-report.json ] && [ -s gitleaks-report.json ]; then
          echo "❌ Potential secrets detected!"
          cat gitleaks-report.json
          exit 1
        else
          echo "✅ No secrets detected"
        fi

  docker-security:
    name: 🐳 Docker Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Docker image
      run: |
        docker build -t thaprobid-api:security-test .
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'thaprobid-api:security-test'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  configuration-security:
    name: ⚙️ Configuration Security Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for hardcoded secrets in config
      run: |
        echo "🔍 Checking configuration files for potential security issues..."
        
        # Check for hardcoded passwords/secrets in appsettings
        if grep -r -i "password.*=" api/appsettings*.json; then
          echo "❌ Potential hardcoded passwords found in configuration!"
          exit 1
        fi
        
        # Check for hardcoded connection strings with credentials
        if grep -r "uid=.*pwd=" api/appsettings*.json; then
          echo "⚠️ Warning: Database credentials found in configuration files"
          echo "Consider using environment variables or Azure Key Vault"
        fi
        
        # Check for JWT secrets
        if grep -r -i "jwtsecret\|jwt.*key" api/appsettings*.json; then
          echo "❌ JWT secrets should not be in configuration files!"
          exit 1
        fi
        
        echo "✅ Configuration security check passed"
        
    - name: Validate Docker security
      run: |
        echo "🐳 Checking Docker configuration..."
        
        # Check if running as root
        if grep -q "USER root" Dockerfile; then
          echo "⚠️ Warning: Container running as root user"
        fi
        
        # Check for COPY with wide permissions
        if grep -q "COPY \. \." Dockerfile; then
          echo "⚠️ Warning: Copying entire directory - consider being more specific"
        fi
        
        echo "✅ Docker security check completed"

  security-report:
    name: 📊 Security Report
    runs-on: ubuntu-latest
    needs: [dependency-security, code-security-analysis, secrets-scan, configuration-security]
    if: always()
    
    steps:
    - name: Generate security summary
      run: |
        echo "## 🔒 Security Check Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Dependency Security | ${{ needs.dependency-security.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Code Security Analysis | ${{ needs.code-security-analysis.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Secrets Detection | ${{ needs.secrets-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Configuration Security | ${{ needs.configuration-security.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📅 **Scan Date:** $(date)" >> $GITHUB_STEP_SUMMARY